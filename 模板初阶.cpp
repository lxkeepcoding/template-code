//#include<iostream>
//using namespace std;
//int main()
//{
//
//}
//void Swap(int& left, int& right)
//{
//	int temp = left;
//	left = right;
//	right = temp;
//}
//void Swap(double& left, double& right)
//{
//	double temp = left;
//	left = right;
//	right = temp;
//}
//void Swap(char& left, char& right)
//{
//	char temp = left;
//	left = right;
//	right = temp;
//}
//......

//#include<iostream>
//using namespace std;
//
//template<typename T>
//void Swap(T& left, T& right)
//{
//	T temp = left;
//	left = right;
//	right = temp;
//}
//
//int main()
//{
//	int a = 1;
//	int b = 2;
//	Swap(a, b);
//	cout << "a" << a << "," << "b" << b << endl;
//	double c = 3;
//	double d = 4;
//	Swap(c, d);
//	cout << "c" << c << "," << "d" << d << endl;
//	return 0;
//}

//
//#include<iostream>
//using namespace std;
//
////template<typename T>
////void Swap(T& left, T& right)
////{
////	T temp = left;
////	left = right;
////	right = temp;
////}
////
////int main()
////{
////	int a = 1;
////	int b = 2;
////	Swap(a, b);
////	cout << "a:" << a << "," << "b:" << b << endl;
////	double c = 3;
////	double d = 4;
////	Swap(c, d);
////	cout << "c:" << c << "," << "d:" << d << endl;
////	return 0;
////}
//
//
//template<class T>
//T Add(const T& left, const T& right)
//{
//	return left + right;
//}
//int main()
//{
//	int a1 = 10, a2 = 20;
//	double d1 = 10.0, d2 = 20.0;
//	Add(a1, a2);
//	Add(d1, d2);
//	/*
//	该语句不能通过编译，因为在编译期间，当编译器看到该实例化时，需要推演其实参类型
//	通过实参a1将T推演为int，通过实参d1将T推演为double类型，但模板参数列表中只有一个T，
//	编译器无法确定此处到底该将T确定为int 或者 double类型而报错
//	注意：在模板中，编译器一般不会进行类型转换操作，因为一旦转化出问题，编译器就需要背黑锅
//	Add(a1, d1);
//	*/
//	// 此时有两种处理方式：1. 用户自己来强制转化 2. 使用显式实例化
//	//Add(a, (int)d);
//	return 0;
//}

//#include<iostream>
//using namespace std;
//
//template<class T>
//T Add(const T& left, const T& right)
//{
//	return left + right;
//}
//int main()
//{
//	int a1 = 10, a2 = 20;
//	double d1 = 10.0, d2 = 20.0;
//	Add(a1, a2);
//	Add(d1, d2);
//	Add<int>(a1, d2);
//	return 0;
//}

//#include<iostream>
//using namespace std;
//
//
//// 专门处理int的加法函数
//int Add(int left, int right)
//{
//	return left + right;
//}
//// 通用加法函数
//template<class T1, class T2>
//T1 Add(T1 left, T2 right)
//{
//	return left + right;
//}
//void Test()
//{
//	Add(1, 2); // 与非函数模板类型完全匹配，不需要函数模板实例化
//	Add(1, 2.0); // 模板函数可以生成更加匹配的版本，编译器根据实参生成更加匹配的Add函数
//}
//
//
////// 专门处理int的加法函数
////int Add(int left, int right)
////{
////	return left + right;
////}
////// 通用加法函数
////template<class T>
////T Add(T left, T right)
////{
////	return left + right;
////}
////void Test()
////{
////	Add(1, 2); // 与非模板函数匹配，编译器不需要特化
////	Add<int>(1, 2); // 调用编译器特化的Add版本
////}
////int main()
////{
////	Test();
////}


//// 动态顺序表
//// 注意：Vector不是具体的类，是编译器根据被实例化的类型生成具体类的模具
//template<class T>
//class Vector
//{
//public:
//	Vector(size_t capacity = 10)
//		: _pData(new T[capacity])
//		, _size(0)
//		, _capacity(capacity)
//	{}
//	// 使用析构函数演示：在类中声明，在类外定义。
//	~Vector();
//	void PushBack(const T& data)；
//		void PopBack()；
//		// ...
//		size_t Size() { return _size; }
//	T& operator[](size_t pos)
//	{
//		assert(pos < _size);
//		return _pData[pos];
//	}
//private:
//	T* _pData;
//	size_t _size;
//	size_t _capacity;
//};
//// 注意：类模板中函数放在类外进行定义时，需要加模板参数列表
//template <class T>
//Vector<T>::~Vector()
//{
//	if (_pData)
//		delete[] _pData;
//	_size = _capacity = 0;
//}